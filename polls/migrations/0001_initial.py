# Generated by Django 5.1.2 on 2024-11-27 22:18

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Formulaire',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(default='', max_length=255, verbose_name='Titre du Formulaire')),
                ('description', models.TextField(default='', verbose_name='Description du Formulaire')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('num_question', models.AutoField(primary_key=True, serialize=False, verbose_name='Numéro de la Question')),
                ('text', models.TextField(verbose_name='Texte de la Question')),
                ('can_ask', models.BooleanField(default=True, verbose_name='Est une Question ?')),
            ],
        ),
        migrations.CreateModel(
            name='Parent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(default='', max_length=255)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=255, verbose_name='Nom du Domaine')),
                ('formulaire', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='domains', to='polls.formulaire', verbose_name='Formulaire')),
            ],
        ),
        migrations.CreateModel(
            name='Questionnaire',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de Création')),
                ('unique_key', models.CharField(default='', max_length=255, verbose_name='Clé Unique')),
                ('formulaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.formulaire', verbose_name='Formulaire')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Parent')),
            ],
        ),
        migrations.CreateModel(
            name='DomaineResponse',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('score_total', models.IntegerField(default=0)),
                ('domaine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.domain')),
                ('questionnaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='domaine_responses', to='polls.questionnaire')),
            ],
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('answer', models.IntegerField(choices=[(0, '0'), (1, '1'), (2, '2')], default=0)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.question')),
                ('questionnaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='polls.questionnaire')),
            ],
        ),
        migrations.CreateModel(
            name='SousDomain',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=255, verbose_name='Nom du Sous-Domaine')),
                ('domain', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='polls.domain', verbose_name='Domaine')),
            ],
        ),
        migrations.AddField(
            model_name='question',
            name='sous_domain',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='polls.sousdomain', verbose_name='Sous Domaine'),
        ),
        migrations.CreateModel(
            name='SousDomaineResponse',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('score_total', models.IntegerField(default=0)),
                ('questionnaire', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sous_domaine_responses', to='polls.questionnaire')),
                ('sous_domaine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.sousdomain')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='', max_length=255, verbose_name='Nom de l’Élève')),
                ('age', models.IntegerField(default=1, verbose_name='Âge')),
                ('sexe', models.CharField(choices=[('M', 'Masculin'), ('F', 'Féminin')], default='M', max_length=1, verbose_name='Sexe')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date de Naissance')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='questionnaire',
            name='student',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='polls.student', verbose_name='Élève'),
        ),
    ]
